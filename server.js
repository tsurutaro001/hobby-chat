// server.js
const path = require('path');
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { Pool } = require('pg');

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*' } });

// Âõ∫ÂÆö„É°„É≥„Éê„ÉºÔºà„Éï„É≠„É≥„Éà„Å®‰∏ÄËá¥Ôºâ
const MEMBERS = ['„Å™„Åä„Åç', '„Çä„Åï', '„Åï„Å™', '„Çä„Å®'];

// ÈùôÁöÑÈÖç‰ø° & „É´„Éº„Éà/„Éò„É´„Çπ
const PUBLIC_DIR = path.join(__dirname, 'public');
app.use(express.static(PUBLIC_DIR));
app.get('/', (_req, res) => res.sendFile(path.join(PUBLIC_DIR, 'index.html')));
app.get('/healthz', (_req, res) => res.type('text').send('ok'));

// DBÊé•Á∂ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL ? { rejectUnauthorized: false } : false
});

// Ëµ∑ÂãïÊôÇÔºö„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÔºÜÂàóËøΩÂä†
(async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS messages (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        text TEXT NOT NULL DEFAULT '',
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        image_base64 TEXT,
        image_mime TEXT
      );
    `);
    await pool.query(`
      CREATE TABLE IF NOT EXISTS last_reads (
        name TEXT PRIMARY KEY,
        last_message_id INTEGER REFERENCES messages(id) ON DELETE SET NULL
      );
    `);
    await pool.query(`ALTER TABLE messages ADD COLUMN IF NOT EXISTS image_base64 TEXT;`);
    await pool.query(`ALTER TABLE messages ADD COLUMN IF NOT EXISTS image_mime TEXT;`);
    console.log('‚úÖ DB ready');
  } catch (e) {
    console.error('‚ùå DB init error:', e);
  }
})();

// ÁîªÂÉè„ÇØ„É™„Éº„Éã„É≥„Ç∞Ôºà3Êó•Ë∂Ö„ÅÆÁîªÂÉè„Éá„Éº„Çø„ÇíÂâäÈô§Ôºâ
async function cleanupOldImages() {
  try {
    const r = await pool.query(`
      WITH old AS (
        SELECT id FROM messages
        WHERE image_base64 IS NOT NULL
          AND created_at < NOW() - INTERVAL '3 days'
      )
      UPDATE messages m
         SET image_base64 = NULL, image_mime = NULL
      FROM old
      WHERE m.id = old.id;
    `);
    console.log('üßº image cleanup done');
  } catch (e) {
    console.error('‚ùå image cleanup error:', e);
  }
}
// Ëµ∑ÂãïÊôÇÔºã1ÊôÇÈñì„Åî„Å®„Å´ÂÆüË°å
cleanupOldImages();
setInterval(cleanupOldImages, 60 * 60 * 1000);

// „Éò„É´„Éë
const allowedName = (n) => MEMBERS.includes((n || '').toString().trim());
const clamp = (s, n) => (s ?? '').toString().slice(0, n);

// Socket.IO
io.on('connection', async (socket) => {
  // Â±•Ê≠¥ÔºöÊúÄÊñ∞50‰ª∂ ‚Üí Âè§‚ÜíÊñ∞ÔºàASCÔºâ„ÅßÈÄÅ‰ø°
  try {
    const { rows } = await pool.query(`
      SELECT id,name,text,created_at,image_base64,image_mime FROM (
        SELECT id,name,text,created_at,image_base64,image_mime
        FROM messages
        ORDER BY id DESC
        LIMIT 50
      ) t ORDER BY id ASC;
    `);
    rows.forEach(row => socket.emit('msg', row));
    const reads = await pool.query(`SELECT name,last_message_id FROM last_reads;`);
    socket.emit('reads_bulk', reads.rows);
    console.log(`‚ÑπÔ∏è history rows sent: ${rows.length}, reads sent: ${reads.rowCount}`);
  } catch (e) {
    console.error('‚ùå fetch history error:', e);
  }

  // ÂèÇÂä†
  socket.on('join', (name) => {
    const n = (name || '').toString().trim();
    if (!allowedName(n)) {
      socket.data.name = 'guest';
      socket.emit('sys', '„É°„É≥„Éê„ÉºÊú™ÈÅ∏Êäû„ÅÆ„Åü„ÇÅ guest „ÅßÂèÇÂä†„Åó„Åæ„Åó„Åü');
      return;
    }
    socket.data.name = n;
    socket.broadcast.emit('sys', `${socket.data.name} „ÅåÂèÇÂä†„Åó„Åæ„Åó„Åü`);
  });

  // „ÉÜ„Ç≠„Çπ„ÉàÈÄÅ‰ø°
  socket.on('msg', async (text) => {
    const name = socket.data.name || 'guest';
    const safe = clamp(text, 2000);
    if (!safe) return;
    try {
      const r = await pool.query(
        `INSERT INTO messages(name, text) VALUES($1,$2)
         RETURNING id,name,text,created_at,image_base64,image_mime`,
        [name, safe]
      );
      io.emit('msg', r.rows[0]);
    } catch (e) {
      console.error('‚ùå insert text error:', e);
      socket.emit('sys', '„É°„ÉÉ„Çª„Éº„Ç∏‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  });

  // ÁîªÂÉèÈÄÅ‰ø°Ôºà~700KB„Åæ„Åß„ÅÆPNG/JPEG/GIF/WebPÔºâ
  socket.on('upload_image', async (payload = {}) => {
    try {
      const name = socket.data.name || 'guest';
      const dataURL = String(payload.dataURL || '');
      const m = dataURL.match(/^data:(image\/(png|jpeg|gif|webp));base64,([A-Za-z0-9+/=]+)$/);
      if (!m) return socket.emit('sys', 'ÁîªÂÉè„ÅØ PNG/JPEG/GIF/WebP „ÅÆ„ÅøÂØæÂøú„Åß„Åô');
      if (dataURL.length > 950_000) return socket.emit('sys', 'ÁîªÂÉè„ÅåÂ§ß„Åç„Åô„Åé„Åæ„ÅôÔºà~700KB„Åæ„ÅßÔºâ');
      const mime = m[1];

      const r = await pool.query(
        `INSERT INTO messages(name,text,image_base64,image_mime)
         VALUES($1,'',$2,$3)
         RETURNING id,name,text,created_at,image_base64,image_mime`,
        [name, dataURL, mime]
      );
      io.emit('msg', r.rows[0]);
    } catch (e) {
      console.error('‚ùå upload_image error:', e);
      socket.emit('sys', 'ÁîªÂÉè„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  });

  // Êó¢Ë™≠Êõ¥Êñ∞ÔºàNULLÂØæÁ≠ñ: COALESCEÔºâ
  socket.on('read_upto', async (lastId) => {
    try {
      const name = socket.data?.name;
      if (!allowedName(name)) return;
      const id = Number(lastId) || 0;
      await pool.query(`
        INSERT INTO last_reads(name,last_message_id)
        VALUES($1,$2)
        ON CONFLICT (name) DO UPDATE
        SET last_message_id = GREATEST(
          COALESCE(last_reads.last_message_id, 0),
          EXCLUDED.last_message_id
        );
      `, [name, id]);
      io.emit('reads', { name, last_message_id: id });
    } catch (e) {
      console.error('‚ùå read_upto error:', e);
    }
  });

  // Â±•Ê≠¥ÂâäÈô§ÔºàÂêçÂâçÊ®©Èôê + ‰ªªÊÑè„Éà„Éº„ÇØ„É≥Ôºâ
  socket.on('clear', async (payload = {}) => {
    try {
      const allowedClear = ['„Å™„Åä„Åç'];
      const okName = allowedClear.includes(socket.data?.name);
      const adminToken = process.env.ADMIN_TOKEN || '';
      const okToken = adminToken ? (payload.token === adminToken) : true;
      if (!okName || !okToken) return;

      await pool.query('TRUNCATE TABLE messages RESTART IDENTITY;');
      await pool.query('UPDATE last_reads SET last_message_id = NULL;');
      io.emit('cleared');
      console.log('üßπ history cleared by', socket.data.name);
    } catch (e) {
      console.error('‚ùå clear error:', e);
      socket.emit('sys', 'Â±•Ê≠¥ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„ÅüÔºà„Çµ„Éº„Éê„É≠„Ç∞ÂèÇÁÖßÔºâ');
    }
  });

  socket.on('disconnect', () => {
    if (socket.data.name && socket.data.name !== 'guest') {
      io.emit('sys', `${socket.data.name} „ÅåÈÄÄÂá∫„Åó„Åæ„Åó„Åü`);
    }
  });
});

// ‰æãÂ§ñÊè°„ÇäÔºàÈñãÁô∫ÊôÇ„ÅÆ„É´„Éº„ÉóÊäëÊ≠¢Ôºâ
process.on('unhandledRejection', (err) => console.error('unhandledRejection:', err));
process.on('uncaughtException', (err) => console.error('uncaughtException:', err));

// Ëµ∑Âãï
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';
server.listen(PORT, HOST, () => {
  console.log(`Hobby Chat server running: http://localhost:${PORT}`);
});